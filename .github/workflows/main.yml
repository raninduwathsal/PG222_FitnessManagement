name: Deploy Spring Boot App to VPS

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the 'master' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Java
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin' # Specify the Java distribution (e.g., adopt, temurin, zulu)

    # Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Build with Maven
    - name: Build with Maven
      run: mvn clean install -DskipTests

    # Deploy to VPS
    - name: Deploy to VPS
      env:
        PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}  # Store your private key in GitHub Secrets
        VPS_USER: ${{ secrets.VPS_USER }}  # The username for SSH (e.g., 'root' or 'ubuntu')
        VPS_HOST: ${{ secrets.VPS_HOST }}  # The IP address or hostname of your VPS
      run: |
        # Install SSH client and SCP (just in case it's missing)
        sudo apt-get update
        sudo apt-get install -y openssh-client

        # Create SSH key directory
        mkdir -p ~/.ssh

        # Add the private SSH key for authentication
        echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Add the VPS to known hosts to avoid confirmation prompt
        ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

        # SSH into the VPS, stop any running process, remove old JAR, and deploy the new one
        ssh $VPS_USER@$VPS_HOST << 'EOF'
          # Stop the running application (if any)
          pid=$(ps aux | grep 'java -jar fitness-0.0.1-SNAPSHOT.jar' | grep -v grep | awk '{print $2}')
          if [ -n "$pid" ]; then
            echo "Stopping old application (PID: $pid)"
            kill -9 $pid
          else
            echo "No old application running."
          fi

          # Remove old JAR if it exists (optional but recommended)
          rm -f ~/pg222-project/fitness-0.0.1-SNAPSHOT.jar

          # Create the pg222-project directory if it doesn't exist
          mkdir -p ~/pg222-project

          # Deploy the new JAR file to the pg222-project directory on the VPS
          scp ~/github/workspace/target/fitness-0.0.1-SNAPSHOT.jar $VPS_USER@$VPS_HOST:~/pg222-project/

          # Run the new JAR file in the background
          echo "Starting new application..."
          nohup java -jar ~/pg222-project/fitness-0.0.1-SNAPSHOT.jar > ~/pg222-project/nohup.out 2>&1 &
        EOF
